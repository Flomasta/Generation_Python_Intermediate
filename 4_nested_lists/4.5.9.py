n = int(input())
matrix = [list(map(int, input().split())) for i in range(n)]

mtx_cols, main_diag, secondary_diag, mtx_line = [], [], [], []
# collect lists
for i in range(n):
    row = []
    main_diag.append(matrix[i][i])
    secondary_diag.append(matrix[i][n - i - 1])
    for j in range(n):
        mtx_line.append(matrix[i][j])
        row.append(matrix[j][i])
    mtx_cols.append(row)
mtx_line.sort()
# check sequence
for i in range(len(mtx_line) - 1):
    if mtx_line[i] == mtx_line[i + 1] - 1 and mtx_line[i] > 0:
        flag = True
    else:
        flag = False
        break
# check sums
for i in range(n):
    if sum(matrix[i]) == sum(mtx_cols[i]) == sum(main_diag) == sum(secondary_diag) and len(
            set(mtx_line)) == n ** 2 and flag:
        continue
    else:
        print('NO')
        break
else:
    print('YES')
# lst = map(int, open(0).read().split())
# print(lst)

# –æ—Ç–ª–∏—á–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ
# n = int(input())
# a = [[*map(int, input().split())] for _ in range(n)]
# print(('NO', 'YES')[set(sum(a, [])) == set((*range(1, n ** 2 + 1),))   # —Ä—è–¥ –Ω–∞—Ç—É—Ä. —á–∏—Å–µ–ª –¥–æ n ** 2
#                     and
#                     len(set(map(sum, (*a,                              # —Å—É–º–º—ã —Å—Ç—Ä–æ–∫
#                                       *zip(*a),                            # —Å—É–º–º—ã —Å—Ç–æ–ª–±—Ü–æ–≤ (—Ç—Ä–∞–Ω—Å–ø–æ–Ω-—ã–π –∫–≤-—Ç)
#                                       [a[i][i] for i in range(n)],         # —Å—É–º–º–∞ –≥–ª. –¥–∏–∞–≥–æ–Ω–∞–ª–µ–π
#                                       [a[i][~i] for i in range(n)]))       # —Å—É–º–º–∞ –≤—Ç–æ—Ä. –¥–∏–∞–≥–æ–Ω–∞–ª–∏
#                             )) == 1])                                       # –≤—Å–µ –æ–Ω–∏ –¥–æ–ª–∂–Ω—ã —Å–æ–≤–ø–∞–¥–∞—Ç—å




# –ú–∞–≥–∏—á–µ—Å–∫–∏–π –∫–≤–∞–¥—Ä–∞—Ç üå∂Ô∏è
# –ú–∞–≥–∏—á–µ—Å–∫–∏–º –∫–≤–∞–¥—Ä–∞—Ç–æ–º –ø–æ—Ä—è–¥–∫–∞ nn –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è –∫–≤–∞–¥—Ä–∞—Ç–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ —Ä–∞–∑–º–µ—Ä–∞ n \times nn√ón, —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–∞—è –∏–∑ –≤—Å–µ—Ö —á–∏—Å–µ–ª 1, 2, 3, \ldots, n^21,2,3,‚Ä¶,n
# 2
# —Ç–∞–∫, —á—Ç–æ —Å—É–º–º—ã –ø–æ –∫–∞–∂–¥–æ–º—É —Å—Ç–æ–ª–±—Ü—É, –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–µ –∏ –∫–∞–∂–¥–æ–π –∏–∑ –¥–≤—É—Ö –¥–∏–∞–≥–æ–Ω–∞–ª–µ–π —Ä–∞–≤–Ω—ã –º–µ–∂–¥—É —Å–æ–±–æ–π. –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∑–∞–¥–∞–Ω–Ω–∞—è –∫–≤–∞–¥—Ä–∞—Ç–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞ –º–∞–≥–∏—á–µ—Å–∫–∏–º –∫–≤–∞–¥—Ä–∞—Ç–æ–º.
#
# –§–æ—Ä–º–∞—Ç –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
# –ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞—ë—Ç—Å—è –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ nn ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –∏ —Å—Ç–æ–ª–±—Ü–æ–≤ –≤ –º–∞—Ç—Ä–∏—Ü–µ, –∑–∞—Ç–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –º–∞—Ç—Ä–∏—Ü—ã: nn —Å—Ç—Ä–æ–∫, –ø–æ nn —á–∏—Å–µ–ª –≤ –∫–∞–∂–¥–æ–π, —Ä–∞–∑–¥–µ–ª—ë–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª–∞–º–∏.
#
# –§–æ—Ä–º–∞—Ç –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
# –ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–≤–µ—Å—Ç–∏ —Å–ª–æ–≤–æ YES, –µ—Å–ª–∏ –º–∞—Ç—Ä–∏—Ü–∞ —è–≤–ª—è–µ—Ç—Å—è –º–∞–≥–∏—á–µ—Å–∫–∏–º –∫–≤–∞–¥—Ä–∞—Ç–æ–º, –∏ —Å–ª–æ–≤–æ NO –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ.
#
# –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ üü¢
# Sample Input 1:
#
# 3
# 8 1 6
# 3 5 7
# 4 9 2
# Sample Output 1:
#
# YES
# Sample Input 2:
#
# 3
# 8 2 6
# 3 5 7
# 4 9 1
# Sample Output 2:
#
# NO
# Sample Input 3:
#
# 3
# 4 9 2
# 3 5 7
# 8 1 6
# Sample Output 3:
#
# YES
